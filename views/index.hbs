<link rel="stylesheet" href="/codemirror/lib/codemirror.css">
<link rel="stylesheet" href="/codemirror/theme/monokai.css">
<link rel="stylesheet" href="/codemirror/addon/hint/show-hint.css"/>
<link rel="stylesheet" href="/codemirror/addon/display/fullscreen.css" />
<link rel="stylesheet" href="/bootstrap/css/bootstrap.css">

<!--bootstrap的alert样式需要引入jquery-->
<script src="/javascripts/jquery.js"></script>
<script src="/bootstrap/js/bootstrap.js"></script>
<!--bootstrap的tree插件，用来显示异常信息，我觉得非常合适-->
<script src="/javascripts/bootstrap-treeview.js"></script>


<!--js代码格式化-->
<script src="/javascripts/beautify.js"></script>
<script src="/javascripts/index.js"></script>
<div class="container">
    <h1>
        {{title}}
        <small class="tips">(POWERED BY <a href="https://github.com/sixtrees">sixtrees</a>)
        </small>
        <span class="pull-right">
             <svg aria-hidden="true" class="octicon octicon-mark-github" height="32" version="1.1" viewBox="0 0 16 16"
                  width="32">
                <path fill-rule="evenodd"
                      d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"></path>
            </svg>
        </span>
    </h1>
    <div class="alert alert-warning" id="msg_alert">
        <a href="#" class="close" data-dismiss="alert">
            &times;
        </a>
        <strong>tips:</strong><span id="msg">可以使用<code>Ctrl+Alt+L</code>格式化代码;<code>Ctrl+F5</code>运行代码;<code>F11</code>开启全屏。</span>
    </div>

    <textarea id="code"></textarea>


    <div class="mt20"></div>
    <button onclick="getExpress()" style="width:200px;" class="btn btn-info">执行</button>
    <button onclick="clearCode()" style="width: 200px;" class="btn btn-danger">清空编辑区</button>
    <button onclick="enlargeFont()" style="width: 200px;" class="btn btn-info">增大字体</button>
    <button onclick="ensmallFont()" style="width: 200px;" class="btn btn-info">减小字体</button>
    <div class="mt20"></div>
    <div class="panel panel-success pull-left" style="width:50%;height: 370px;">
        <div class="panel-heading">
            <h3 class="panel-title">输出控制台</h3>
        </div>
        <div class="panel-body">
            <textarea id="output" style="height:300px;width:100%;" readonly="readonly"></textarea>
        </div>
    </div>

    <div class="panel panel-danger pull-right" style="width:50%;height: 370px;">
        <div class="panel-heading">
            <h3 class="panel-title">错误控制台</h3>
        </div>
        <div class="panel-body">
            <div id="error" class="">
            </div>
        </div>
    </div>

    <!-- Create a simple CodeMirror instance #begin-->

    <script src="/codemirror/lib/codemirror.js"></script>
    <script src="/codemirror/mode/javascript/javascript.js"></script>
    <script src="/codemirror/addon/selection/active-line.js"></script>
    <script src="/codemirror/addon/edit/matchbrackets.js"></script>
    <script src="/codemirror/addon/hint/show-hint.js"></script>
    <script src="/codemirror/addon/hint/javascript-hint.js"></script>
    <script src="/codemirror/addon/display/fullscreen.js"></script>
    <style>
        .CodeMirror {
            font-family: "Consolas", "Arial", "微软雅黑";
            font-size: 20px;
        }
    </style>

    <script type="text/javascript" src="codemirror/addon/selection/active-line.js"></script>
    <script type="text/javascript" src="codemirror/addon/edit/matchbrackets.js"></script>
    <script type="text/javascript" src="codemirror/addon/display/fullscreen.js"></script>
    <script>

        var editor = CodeMirror.fromTextArea(document.getElementById("code"), {
            lineNumbers: true,
            styleActiveLine: true,
            matchBrackets: true,
            theme: "monokai",
            mode: "text/javascript",
            indentWithTabs: true,
            autofocus: true,
            matchBrackets: true,
            lineWrapping: true,
            completeSingle: false,
            extraKeys: {
                "Ctrl-Q": "autocomplete"
            }, //
        });
        editor.setOption("extraKeys", {
            // Tab键换成4个空格
            Tab: function (cm) {
                var spaces = Array(cm.getOption("indentUnit") + 1).join(" ");
                cm.replaceSelection(spaces);
            },
            // F11键切换全屏
            "F11": function (cm) {
                cm.setOption("fullScreen", !cm.getOption("fullScreen",true));
            },
            // Esc键退出全屏
            "Esc": function (cm) {
                if (cm.getOption("fullScreen")) cm.setOption("fullScreen", false);
            },
            "Ctrl-Alt-L": function (cm) {
                decodeJsCode();
            },
            "Ctrl-F5": function (cm) {
                getExpress();
            }
        });

        /**
         * 用来实时对用户的输入进行提示
         */
        editor.on("cursorActivity", function () {
            //获取用户当前的编辑器中的编写的代码
            var words = editor.getValue() + "";
            //利用正则取出用户输入的所有的英文的字母
            words = words.replace(/[a-z]+[\-|\']+[a-z]+/ig, '').match(/([a-z]+)/ig);
            //将获取到的用户的单词传入CodeMirror,并在javascript-hint中做匹配
            CodeMirror.ukeys = words;
            //调用显示提示
            editor.showHint();
        });

        var enlargeFont =function () {
            //获取para的字体大小
            var thisEle = $(".CodeMirror").css("font-size");

            //parseFloat的第二个参数表示转化的进制，10就表示转为10进制
            var textFontSize = parseFloat(thisEle, 10);

            //javascript自带方法
            var unit = thisEle.slice(-2); //获取单位
            textFontSize += 1;

            $(".CodeMirror").css("font-size", textFontSize + unit);
            editor.setOption(
                    "cursorHeight",1
            );
        }

        var ensmallFont =function () {
            //获取para的字体大小
            var thisEle = $(".CodeMirror").css("font-size");

            //parseFloat的第二个参数表示转化的进制，10就表示转为10进制
            var textFontSize = parseFloat(thisEle, 10);

            //javascript自带方法
            var unit = thisEle.slice(-2); //获取单位
            textFontSize -= 1;

            $(".CodeMirror").css("font-size", textFontSize + unit);
            editor.setOption(
                    "cursorHeight",1
            );
        }

        //定义一个全局变量，用来显示用户当前运行的结果
        window.res = "";
        console.oldLog = console.log;
        console.log = function (str) {
            console.oldLog(str);
            window.res += str + "\r\n";
        };

        var getExpress = function () {
            $("#output").val("");
            document.getElementById("error").innerHTML = "";
            window.res = "";
            var exp = editor.getValue();
            var res2 = "";
            try {
                var res2 = eval(exp);
                //获取执行的结果
                if (res2 !== undefined) {
                    window.res += res2 + "\r\n";
                } else {
                    if (res2 === "") {
                        //如果没有任何输出，包括控制台输出的话，输出这句话。
                        window.res += "undefined" + "\r\n";
                    }
                }
            } catch (ex) {
                //处理异常事件
                var tree = [
                    {
                        text: "Catch Error(部分信息，可能因浏览器而异)",
                        nodes: [
                            {
                                text: "Error message",
                                nodes: [
                                    {
                                        text: ex.message,
                                        color: "#ff0000"
                                    }
                                ]
                            }, {
                                text: "Error Description",
                                nodes: [
                                    {
                                        text: ex.description,
                                        color: "#ff0000"
                                    }
                                ]
                            }, {
                                text: "Error Position",
                                nodes: [
                                    {
                                        text: "line: " + ex.lineNumber + ", column: " + ex.columnNumber,
                                        color: "#ff0000"
                                    }
                                ]
                            },
                            {
                                text: "Error name",
                                nodes: [
                                    {
                                        text: ex.name,
                                        color: "#ff0000"
                                    }
                                ]
                            },
                            {
                                text: "异常帮助",
                                nodes: [
                                    {
                                        text: "EvalError：eval()的使用与定义不一致",
                                        color: "#009926"
                                    }, {
                                        text: "RangeError：数值越界",
                                        color: "#009926"
                                    }, {
                                        text: "ReferenceError：非法或不能识别的引用数值",
                                        color: "#009926"
                                    }, {
                                        text: "SyntaxError：发生语法解析错误",
                                        color: "#009926"
                                    }, {
                                        text: "TypeError：操作数类型错误",
                                        color: "#009926"
                                    }, {
                                        text: "URIError：URI处理函数使用不当",
                                        color: "#009926"
                                    }
                                ]
                            }
                        ]

                    }
                ];
                $('#error').treeview({data: tree});
            }//end of handle exception

            $("#output").val(window.res);//显示js语句执行结果
        }

        var clearCode = function () {
            editor.setValue("");
        }
    </script>
</div>